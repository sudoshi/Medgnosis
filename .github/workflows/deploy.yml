name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install and build frontend
        working-directory: ./frontend
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          npm ci
          rm -rf .next out
          npm run build

      # Backend setup
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, libxml, mbstring, pdo
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        working-directory: ./backend
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Configure backend
        working-directory: ./backend
        run: |
          cp .env.production .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      # Deploy to server
      - name: Deploy application
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/var/www/Medgnosis"
          rm: true
          exclude: |
            **/.git*
            **/node_modules
            backend/vendor
            **/.next
            **/tests
            **/.env.example
            **/.editorconfig
            **/phpunit.xml

      # Post-deployment tasks
      - name: Execute post-deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop services
            sudo systemctl stop php8.2-fpm
            sudo systemctl stop apache2

            # Install backend dependencies
            cd /var/www/Medgnosis/backend
            composer install --no-interaction --prefer-dist --optimize-autoloader

            # Clear Laravel cache
            sudo -u www-data php artisan config:clear
            sudo -u www-data php artisan route:clear
            sudo -u www-data php artisan view:clear
            
            # Install frontend dependencies and build
            cd ../frontend
            npm install
            sudo rm -rf .next out
            NEXT_TELEMETRY_DISABLED=1 npm run build
            
            # Set up static build directory
            sudo mkdir -p /var/www/Medgnosis/frontend/out
            sudo cp -R out/* /var/www/Medgnosis/frontend/out/
            
            # Set permissions
            sudo chown -R www-data:www-data /var/www/Medgnosis/frontend/out
            sudo chown -R www-data:www-data /var/www/Medgnosis/backend/storage
            sudo chown -R www-data:www-data /var/www/Medgnosis/backend/bootstrap/cache
            
            # Verify Apache configuration and start services
            sudo apache2ctl configtest
            sudo systemctl start php8.2-fpm
            sudo systemctl start apache2
            
            # Log deployment
            echo "Deployment completed successfully on $(date)" >> /var/log/deploy.log
            
            # Verify deployment
            sleep 5 # Wait for services to fully start
            curl -s -o /dev/null -w "%{http_code}" https://demo.medgnosis.app
