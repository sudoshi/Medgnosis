name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install and build frontend
        working-directory: ./frontend
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production
          NEXT_PUBLIC_SKIP_PREFLIGHT_CHECK: true
          NEXT_IGNORE_ESLINT_DURING_BUILDS: true
          SKIP_TYPESCRIPT_CHECK: true
        run: |
          npm ci
          npm list autoprefixer postcss tailwindcss typescript @types/node
          npm run build
          cp server.js .next/standalone/

      # Backend setup
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, libxml, mbstring, pdo
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        working-directory: ./backend
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Configure backend
        working-directory: ./backend
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD || 'acumenus' }}
        run: |
          # Create .env file from template
          cat > .env << EOF
          APP_NAME=Medgnosis
          APP_ENV=production
          APP_KEY=
          APP_DEBUG=false
          APP_URL=https://demo.medgnosis.app

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=warning

          DB_CONNECTION=pgsql
          DB_HOST=localhost
          DB_PORT=5432
          DB_DATABASE=PHM
          DB_USERNAME=postgres
          DB_PASSWORD=${DB_PASSWORD}
          DB_SCHEMA=prod

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120

          SANCTUM_STATEFUL_DOMAINS=demo.medgnosis.app
          SESSION_DOMAIN=.medgnosis.app
          FRONTEND_URL=https://demo.medgnosis.app

          CORS_ALLOWED_ORIGINS=https://demo.medgnosis.app
          EOF

          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      # Deploy to server
      - name: Verify build artifacts
        run: |
          echo "Verifying frontend build artifacts..."
          if [ -d "frontend/.next/standalone" ]; then
            echo "✅ Frontend build artifacts exist"
            ls -la frontend/.next/standalone
          else
            echo "❌ Frontend build artifacts missing"
            exit 1
          fi
          
          echo "Verifying backend files..."
          if [ -d "backend" ]; then
            echo "✅ Backend files exist"
            ls -la backend
          else
            echo "❌ Backend files missing"
            exit 1
          fi
      
      # Test SSH connection before deployment
      - name: Test SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo "SSH connection successful"
          
      # Prepare temporary directories for deployment
      - name: Prepare temporary directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create clean temporary directories
            rm -rf /tmp/medgnosis-deploy
            mkdir -p /tmp/medgnosis-deploy/backend
            mkdir -p /tmp/medgnosis-deploy/frontend
            
            # Backup .env file if it exists
            sudo cp /var/www/Medgnosis/backend/.env /tmp/medgnosis-env-backup 2>/dev/null || true
            
            echo "Temporary deployment directories prepared"

      # Deploy backend to temporary directory
      # Note: If deployment fails with "Could not resolve hostname", 
      # update SSH_HOST secret to use an IP address instead of a hostname
      - name: Deploy backend
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete --exclude=".env" --verbose
          path: backend/
          remote_path: /tmp/medgnosis-deploy/backend
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy frontend to temporary directory
      - name: Deploy frontend
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete --verbose
          path: frontend/.next/standalone/
          remote_path: /tmp/medgnosis-deploy/frontend
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Post-deployment tasks
      - name: Execute post-deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop services
            sudo systemctl stop php8.2-fpm
            sudo systemctl stop apache2
            sudo systemctl stop nextjs

            # Move files from temporary directories to final destination
            echo "Moving files from temporary directories to final destination..."
            
            # Remove existing directories (but keep .env backup)
            sudo rm -rf /var/www/Medgnosis/backend
            sudo rm -rf /var/www/Medgnosis/frontend
            
            # Create fresh directories
            sudo mkdir -p /var/www/Medgnosis/backend
            sudo mkdir -p /var/www/Medgnosis/frontend
            
            # Copy files from temp to destination
            sudo cp -a /tmp/medgnosis-deploy/backend/. /var/www/Medgnosis/backend/
            sudo cp -a /tmp/medgnosis-deploy/frontend/. /var/www/Medgnosis/frontend/
            
            # Restore .env if it existed
            if [ -f "/tmp/medgnosis-env-backup" ]; then
              echo "Restoring .env file..."
              sudo cp /tmp/medgnosis-env-backup /var/www/Medgnosis/backend/.env
            fi
            
            # Install backend dependencies
            cd /var/www/Medgnosis/backend
            sudo composer install --no-interaction --prefer-dist --optimize-autoloader
            
            # Generate application key if needed
            if ! grep -q "APP_KEY=" /var/www/Medgnosis/backend/.env || grep -q "APP_KEY=$" /var/www/Medgnosis/backend/.env; then
              echo "Generating application key..."
              sudo php artisan key:generate
            fi

            # Clear Laravel cache
            sudo php artisan config:clear
            sudo php artisan route:clear
            sudo php artisan view:clear

            # Set up Next.js service
            sudo cp /home/acumenus/GitHub/Medgnosis/nextjs.service /etc/systemd/system/
            sudo systemctl daemon-reload
            
            # Set permissions
            sudo chown -R www-data:www-data /var/www/Medgnosis
            sudo chmod -R 755 /var/www/Medgnosis
            sudo chmod -R 775 /var/www/Medgnosis/backend/storage
            sudo chmod -R 775 /var/www/Medgnosis/backend/bootstrap/cache
            
            # Copy Apache configuration
            sudo cp /home/acumenus/GitHub/Medgnosis/demo-medgnosis.conf /etc/apache2/sites-available/
            
            # Copy frontend server.js to correct location if needed
            if [ ! -f "/var/www/Medgnosis/frontend/server.js" ] && [ -f "/tmp/medgnosis-deploy/frontend/server.js" ]; then
              echo "Copying server.js to frontend directory..."
              sudo cp /tmp/medgnosis-deploy/frontend/server.js /var/www/Medgnosis/frontend/
            fi
            
            sudo a2ensite demo-medgnosis.conf
            
            # Clean up temporary files
            rm -rf /tmp/medgnosis-deploy
            rm -f /tmp/medgnosis-env-backup
            
            # Verify and start services
            sudo apache2ctl configtest
            sudo systemctl start php8.2-fpm
            sudo systemctl start apache2
            sudo systemctl enable nextjs
            sudo systemctl start nextjs
            
            # Log deployment
            echo "Deployment completed successfully on $(date)" >> /var/log/deploy.log
            
            # Verify deployment
            sleep 10 # Wait for services to fully start
            curl -s -o /dev/null -w "%{http_code}" https://demo.medgnosis.app
